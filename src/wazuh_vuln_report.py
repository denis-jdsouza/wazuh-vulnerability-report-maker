#!/usr/bin/python3
"""Tool to generate vulnerability reports from Wazuh.

Output can be filtered by using the commandline switches:
-n , --name :     Only return vulnerabilities for specified package (optional)
-s , --severity : Only return vulnerabilities of that severity (optional)
-c , --cve :      Only return vulnerabilities with that CVE (optional)
-g , --group :    Only return vulnerabilities for group members (optional)
"""


import argparse
import os
import sys
import requests
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots as ms
from tabulate import tabulate
from wazuh_vuln_lib import wazuh_api_calls, ProcessInfo

csv_report_name = 'vuln_report.csv'
summary_report_name = 'summary_vuln_report.jpg'


def get_args():
    """Take arguments from command line for filtering output."""
    parser = argparse.ArgumentParser(
        usage='vuln_dash.py [-h] [-n, --name NAME] [-s, --severity SEVERITY]\n\
              [-c, --cve CVE] [-g, --group GROUP] ')
    parser.add_argument('-n', '--name',
                        default="",
                        dest='name_arg',
                        help='Filter output by package name',
                        type=str
                        )
    parser.add_argument('-s', '--severity',
                        default="",
                        dest='sev_arg',
                        help='Filter output by severity',
                        type=str
                        )
    parser.add_argument('-c', '--cve',
                        default="",
                        dest='cve_arg',
                        help='Filter output by CVE',
                        type=str
                        )
    parser.add_argument('-g', '--group',
                        default="",
                        dest='group_arg',
                        help='Filter agents by group',
                        type=str
                        )
    args = parser.parse_args()
    # Format strings for appending to API requests
    if args.name_arg != "":
        arg_name = str('&search=' + args.name_arg)
    else:
        arg_name = ""
    if args.sev_arg != "":
        arg_sev = str('&severity=' + args.sev_arg)
    else:
        arg_sev = ""
    if args.cve_arg != "":
        arg_cve = str('&cve=' + args.cve_arg)
    else:
        arg_cve = ""
    if args.group_arg != "":
        arg_group = str('&group=' + args.group_arg)
    else:
        arg_group = ""
    # Multiple strings joined together, ignoring empty values
    arg_string = arg_name + arg_sev + arg_cve
    return arg_string, arg_group


def get_envs():
    """Get Wazuh API credentails from environment variables."""
    wazuh_creds = {'w_host': os.getenv('WAZUH_HOST'), 'w_user': os.getenv('WAZUH_USER'),
                   'w_passwd': os.getenv('WAZUH_PASSWD')}
    return wazuh_creds


def agent_counts(agents: list, names: list, oss: dict, vulns: dict):
    """Shows results per agent, grouped by severity."""
    agent_data = {'Agent Name': names, 'Id': agents, 'OS': [],
                  'Crit': [], 'High': [], 'Medium': [], 'Low': [], 'Total': []}
    table_name = 'List of agents and number of vulnerabilities on each:'
    for agent in agents:
        severities = [vuln['severity'] for vuln in vulns[agent]['data']['affected_items']]

        agent_data.get('OS').append(oss.get(agent))
        agent_data.get('Crit').append(severities.count('Critical'))
        agent_data.get('High').append(severities.count('High'))
        agent_data.get('Medium').append(severities.count('Medium'))
        agent_data.get('Low').append(severities.count('Low'))
        agent_data.get('Total').append(vulns[agent]['data']['total_affected_items'])

    agents_vuln_df = pd.DataFrame(agent_data)
    agents_vuln_df.sort_values(by=['Total'], inplace=True, ascending=False)
    print(f'\n{table_name}\n')
    print(tabulate(agents_vuln_df, headers="keys", tablefmt="simple", showindex=False))

    # Export results to CSV file
    pd.DataFrame(columns=[table_name]).to_csv(csv_report_name, index=False)
    agents_vuln_df.to_csv(csv_report_name, index=False, mode='a')
    return agents_vuln_df


def print_results(result: ProcessInfo):
    """Format and display vulnerability results."""
    table_name = f'List of vulnerabilities by {result.type_filter}:'
    print(f'\n{table_name}\n')
    vuln_df = pd.DataFrame(result.item_tuple, columns=[result.type_filter, 'Count'])
    print(tabulate(vuln_df, headers="keys", tablefmt="simple", showindex=False))
    print('\nTotal number detected:', len(result.item_tuple))

    # Export results to CSV file
    pd.DataFrame(columns=['\n']).to_csv(csv_report_name, index=False, mode='a')
    pd.DataFrame(columns=[table_name]).to_csv(csv_report_name, index=False, mode='a')
    vuln_df.to_csv(csv_report_name, index=False, mode='a')


def plot_graphs(agents_vuln, name_occurrence: ProcessInfo,
                sev_occurrence: ProcessInfo):
    """Generate vulnerability summary report."""
    severity_total = sum([severity[1] for severity in sev_occurrence.item_tuple])

    font_style = "style='font-weight:bold;'"
    agent_n = str(len(agents_vuln.index))
    fig = ms(rows=3, cols=1,
            subplot_titles=(f"Severity summary [<span {font_style}>Total: {severity_total}</span>]",
                    f"Top 5 agents & vulnerabilities [<span {font_style}>Total: {agent_n}</span>]",
                    'Top 15 unique vulnerable packages'
                    ),
             specs=[[{"type": "table"}], [{"type": "pie"}], [{}]])

    # Plot 'Severity summary' pie chart
    colors_map = {'Critical': '#bd271e', 'High': '#dcb13f',
                  'Medium': '#016bb4', 'Low': '#6a717d'}
    sev_names = [sev_name[0] for sev_name in sev_occurrence.item_tuple]
    sev_count = [sev_count[1] for sev_count in sev_occurrence.item_tuple]
    pie_colors = [colors_map.get(sev_name) for sev_name in sev_names]
    fig.add_trace(
        go.Pie(labels=sev_names, values=sev_count, textinfo='value',
               marker=dict(colors=pie_colors, line=dict(color='#000000', width=1))
               ),
        row=1,
        col=1,
    )

    # Create table of 'Top agents & vulnerabilities'
    top_agents_vuln = agents_vuln[:5]
    fig.add_trace(
        go.Table(
            header=dict(values=list(top_agents_vuln.columns),
                        font=dict(size=15), align="center"),
            cells=dict(values=top_agents_vuln.transpose().values.tolist(),
                       font=dict(size=10), align="left"),
            columnwidth=[2.5, 1]
        ),
        row=2,
        col=1,
    )

    # Plot 'Top vulnerable packages' bar graph
    # Remove similar packages from list of vulnerable pacakges,
    # this is done to plot a graph of only the unique vulnerabilities.

    # Filter out only base packages
    vuln_packages = name_occurrence.item_tuple.copy()
    for item in name_occurrence.item_tuple:
        if '-' in item[0]:
            base_package = item[0].split('-', 1)[0]
            for packages in vuln_packages:
                if base_package == packages[0]:
                    vuln_packages.remove(item)

    # Filter out the smallest sub-package/package-library
    vuln_packages_tmp = vuln_packages.copy()
    unique_packages = vuln_packages.copy()
    for item in vuln_packages_tmp:
        similar_sub_packages = []
        if '-' in item[0]:
            base_package_prefix = item[0].split('-', 1)[0] + '-'
            for sub_package in unique_packages:
                if base_package_prefix in sub_package[0]:
                    similar_sub_packages.append(sub_package)

        if len(similar_sub_packages) > 1:
            smallest_sub_package = min(dict(similar_sub_packages), key=len)
            for sub_package in similar_sub_packages:
                if smallest_sub_package == sub_package[0]:
                    similar_sub_packages.remove(sub_package)
                    break
            for non_smallest_sub_package in similar_sub_packages:
                if non_smallest_sub_package in unique_packages:
                    unique_packages.remove(non_smallest_sub_package)

    top_unique_packages = unique_packages[:15]
    data = {'Name': [vuln_name[0] for vuln_name in top_unique_packages],
            'Count': [vuln_count[1] for vuln_count in top_unique_packages]}

    fig.add_trace(
        go.Bar(
            x=data.get('Name'),
            y=data.get('Count'),
            text=data.get('Count'),
            showlegend=False
        ),
        row=3,
        col=1
    )

    fig['layout']['yaxis']['title'] = 'Count'
    fig.update_layout(margin_t=50, title_text=None)

    # fig.show()
    # Create an image containing graphs, charts and tables
    fig.write_image(summary_report_name, width=1100, height=800, scale=5)


def main():
    # Interpret command-line switches
    arg_string, arg_group = get_args()

    # Get environment variables
    wazuh_creds = get_envs()

    # Function to retrieve and process data from server API
    try:
        agents, names, oss, vulns = wazuh_api_calls(
            arg_string, arg_group, wazuh_creds)
    except requests.RequestException as err:
        print('Server connection error:', str(err))
        sys.exit()

    # Build classes to store each type of data separately
    name_occurrence = ProcessInfo(
        agents,
        vulns,
        'Name'
    )
    sev_occurrence = ProcessInfo(
        agents,
        vulns,
        'Severity'
    )
    cve_occurrence = ProcessInfo(
        agents,
        vulns,
        'CVE'
    )

    agents_vuln = agent_counts(agents, names, oss, vulns)

    for result in [sev_occurrence, name_occurrence, cve_occurrence]:
        print_results(result)

    plot_graphs(agents_vuln, name_occurrence, sev_occurrence)


if __name__ == "__main__":
    main()
